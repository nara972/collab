plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '2.5.2'
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "com.github.node-gradle.node" version "2.2.3"
}

group 'com.nara.collaboration'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // devtools 추가
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    // web mvc 추가
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Security 추가
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // 웹 페이지를 쉽게 생성하기 위해 thymeleaf 추가
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // Thymeleaf에서 SpringSecurity를 Integration
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //mysql 연동
    implementation 'mysql:mysql-connector-java'
    // spring data jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // starter test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // security test
    testImplementation 'org.springframework.security:spring-security-test'
    // junit test
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    //oauth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    //websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    //webjars
    implementation 'org.webjars:jquery:3.4.1'
    implementation 'org.webjars:bootstrap:4.3.1'
    implementation 'org.webjars:webjars-locator-core'
    implementation 'org.webjars:sockjs-client:1.0.2'
    implementation 'org.webjars:stomp-websocket:2.3.3'

}

// build.gradle
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}
dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
}

/**
 * npm install start
 */
node {
    version = '14.17.3' //자신이 사용하는 노드 버전
    download = true
    nodeModulesDir = file("${projectDir}/src/main/resources/static")
}

task copyFrontLib(type: Copy) {
    from "${projectDir}/src/main/resources/static"
    into "${projectDir}/build/resources/main/static/."
}

copyFrontLib.dependsOn npmInstall
compileJava.dependsOn copyFrontLib

/**
 * npm install end
 */


test {
    useJUnitPlatform()
}